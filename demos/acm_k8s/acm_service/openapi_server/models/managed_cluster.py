from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.spec import Spec
from openapi_server import util

from openapi_server.models.metadata import Metadata  # noqa: E501
from openapi_server.models.spec import Spec  # noqa: E501


class ManagedCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, api_version=None, kind=None, metadata=None, spec=None, status=None
    ):  # noqa: E501
        """ManagedCluster - a model defined in OpenAPI

        :param api_version: The api_version of this ManagedCluster.  # noqa: E501
        :type api_version: str
        :param kind: The kind of this ManagedCluster.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this ManagedCluster.  # noqa: E501
        :type metadata: Metadata
        :param spec: The spec of this ManagedCluster.  # noqa: E501
        :type spec: Spec
        :param status: The status of this ManagedCluster.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            "api_version": str,
            "kind": str,
            "metadata": Metadata,
            "spec": Spec,
            "status": str,
        }

        self.attribute_map = {
            "api_version": "apiVersion",
            "kind": "kind",
            "metadata": "metadata",
            "spec": "spec",
            "status": "status",
        }

        self._api_version = api_version
        self._kind = kind
        self._metadata = metadata
        self._spec = spec
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> "ManagedCluster":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManagedCluster of this ManagedCluster.  # noqa: E501
        :rtype: ManagedCluster
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this ManagedCluster.


        :return: The api_version of this ManagedCluster.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this ManagedCluster.


        :param api_version: The api_version of this ManagedCluster.
        :type api_version: str
        """
        allowed_values = ["cluster.open-cluster-management.io/v1"]  # noqa: E501
        if api_version not in allowed_values:
            raise ValueError(
                "Invalid value for `api_version` ({0}), must be one of {1}".format(
                    api_version, allowed_values
                )
            )

        self._api_version = api_version

    @property
    def kind(self) -> str:
        """Gets the kind of this ManagedCluster.


        :return: The kind of this ManagedCluster.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this ManagedCluster.


        :param kind: The kind of this ManagedCluster.
        :type kind: str
        """
        allowed_values = ["ManagedCluster"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}".format(
                    kind, allowed_values
                )
            )

        self._kind = kind

    @property
    def metadata(self) -> Metadata:
        """Gets the metadata of this ManagedCluster.


        :return: The metadata of this ManagedCluster.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Metadata):
        """Sets the metadata of this ManagedCluster.


        :param metadata: The metadata of this ManagedCluster.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def spec(self) -> Spec:
        """Gets the spec of this ManagedCluster.


        :return: The spec of this ManagedCluster.
        :rtype: Spec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: Spec):
        """Sets the spec of this ManagedCluster.


        :param spec: The spec of this ManagedCluster.
        :type spec: Spec
        """

        self._spec = spec

    @property
    def status(self) -> str:
        """Gets the status of this ManagedCluster.


        :return: The status of this ManagedCluster.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ManagedCluster.


        :param status: The status of this ManagedCluster.
        :type status: str
        """

        self._status = status
