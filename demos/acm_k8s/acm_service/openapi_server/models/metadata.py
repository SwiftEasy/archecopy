from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, labels=None):  # noqa: E501
        """Metadata - a model defined in OpenAPI

        :param name: The name of this Metadata.  # noqa: E501
        :type name: str
        :param labels: The labels of this Metadata.  # noqa: E501
        :type labels: Dict[str, str]
        """
        self.openapi_types = {"name": str, "labels": Dict[str, str]}

        self.attribute_map = {"name": "name", "labels": "labels"}

        self._name = name
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt) -> "Metadata":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metadata of this Metadata.  # noqa: E501
        :rtype: Metadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Metadata.


        :return: The name of this Metadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Metadata.


        :param name: The name of this Metadata.
        :type name: str
        """

        self._name = name

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this Metadata.


        :return: The labels of this Metadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this Metadata.


        :param labels: The labels of this Metadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels
