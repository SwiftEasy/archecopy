version: "0.1-beta"

listener:
  address: 0.0.0.0
  port: 10000
  message_format: huggingface
  connect_timeout: 0.005s

endpoints:
  api_server:
    endpoint: host.docker.internal:18083
    connect_timeout: 0.005s

overrides:
  # confidence threshold for prompt target intent matching
  prompt_target_intent_matching_threshold: 0.7

llm_providers:
  - name: open-ai-gpt-4
    access_key: $OPENAI_API_KEY
    provider: openai
    model: gpt-4
    default: true
  - name: mistral-large-latest
    access_key: $MISTRAL_API_KEY
    provider: mistral
    model: large-latest

system_prompt: |
  You are a helpful assistant.

prompt_targets:

  - name: top_employees
    description: |
      Allows you to find the top employees in different groups, such as departments, locations, or position. You can rank the employees by different criteria, like salary, yoe, or rating. Returns the best-ranked employees for each group, helping you identify top n in the list.
    parameters:
      - name: grouping
        description: |
          Select how you'd like to group the employees. For example, you can group them by department, location, or their position. The function will provide the top-ranked employees within each group you choose.
        required: true
        type: str
        enum: [department, location, position]
      - name: ranking_criteria
        required: true
        type: str
        description: |
          Choose how you'd like to rank the employees. You can rank them by their salary, their years of experience, or their rating. The function will sort the employees based on this ranking and return the best ones from each group.
        enum: [salary, years_of_experience, performance_score]
      - name: top_n
        required: false
        type: int
        default: 3
        description: |
          Enter how many of the top employees you want to see in each group. For example, if you enter 3, the function will show you the top 3 employees for each group you selected.
    endpoint:
      name: api_server
      path: /top_employees
    system_prompt: |
      You are responsible for retrieving the top N employees per group ranked by a constraint.

  - name: aggregate_stats
    description: |
       Calculate summary statistics for groups of employees. You can group employees by categories like department or location and then compute totals, averages, or other statistics for specific attributes such as salary or years of experience.
    parameters:
      - name: grouping
        description: |
          Choose how you'd like to organize the employees. For example, you can group them by department, location, or position. The function will calculate the summary statistics for each group.
        required: true
        type: str
        enum: [department, location, position]
      - name: aggregate_criteria
        description: |
          Select the specific attribute you'd like to analyze. This could be something like salary, years of experience, or rating. The function will calculate the statistic you request for this attribute.
        required: true
        type: str
        enum: [salary, years_of_experience, performance_score]
      - name: aggregate_type
        description: |
          Choose the type of statistic you'd like to calculate for the selected attribute. For example, you can calculate the sum, average, minimum, or maximum value for each group.
        required: true
        type: str
        enum: [SUM, AVG, MIN, MAX]
    endpoint:
      name: api_server
      path: /aggregate_stats
    system_prompt: |
      You help calculate summary statistics for groups of employees. First, organize the employees by the specified grouping (e.g., department, location, or position). Then, compute the requested statistic (e.g., total, average, minimum, or maximum) for a specific attribute like salary, experience, or rating.

  # Top Employees by Performance, Projects, and Timeframe
  - name: employees_projects
    description: |
      Fetch employees with the highest performance scores, considering their project participation and years of experience. You can filter by minimum performance score, years of experience, and department. Optionally, you can also filter by recent project participation within the last Y months.
    parameters:
      - name: min_years_experience
        description: Minimum years of experience to filter employees.
        required: true
        type: int
      - name: department
        description: Department to filter employees by.
        required: true
        type: str
      - name: min_performance_score
        description: Minimum performance score to filter employees.
        required: false
        type: float
        default: 4.0
      - name: min_project_count
        description: Minimum number of projects employees participated in (optional).
        required: false
        type: int
        default: 3
      - name: months_range
        description: Timeframe (in months) for filtering recent projects (optional).
        required: false
        type: int
    endpoint:
      name: api_server
      path: /employees_projects
    system_prompt: |
      You are responsible for retrieving the top N employees ranked by performance and project participation. Use filters for experience and optional project criteria.

  # Employees with Salary Growth Since Last Promotion
  - name: salary_growth
    description: |
      Fetch employees with the highest salary growth since their last promotion, grouped by department. You can filter by a minimum salary increase percentage and department.
    parameters:
      - name: min_salary_increase_percentage
        description: Minimum percentage increase in salary since the last promotion.
        required: true
        type: float
      - name: department
        description: Department to filter employees by (optional).
        required: false
        type: str
        default: "Sales"
    endpoint:
      name: api_server
      path: /salary_growth
    system_prompt: |
      You are responsible for retrieving employees with the highest salary growth since their last promotion. Filter by minimum salary increase percentage and department.

  # Employees with Promotions and Salary Increases by Year
  - name: promotions_increases
    description: |
      Fetch employees who were promoted and received a salary increase in a specific year, grouped by department. You can optionally filter by minimum percentage salary increase and department.
    parameters:
      - name: year
        description: The year in which the promotion and salary increase occurred.
        required: true
        type: int
      - name: min_salary_increase_percentage
        description: Minimum percentage salary increase to filter employees.
        required: false
        type: float
        default: 10.0
      - name: department
        description: Department to filter by (optional).
        required: false
        type: str
        default: "Engineering"
    endpoint:
      name: api_server
      path: /promotions_increases
    system_prompt: |
      You are responsible for fetching employees who were promoted and received a salary increase in a specific year. Apply filters for salary increase percentage and department.

  # Employees by Certification and Years of Experience
  - name: certifications_experience
    description: |
      Fetch employees who have all the required certifications and meet the minimum years of experience. You can filter by department and provide a list of certifications to match.
    parameters:
      - name: certifications
        description: List of required certifications.
        required: true
        type: list
      - name: min_years_experience
        description: Minimum years of experience.
        required: true
        type: int
      - name: department
        description: Department to filter employees by (optional).
        required: false
        type: str
    endpoint:
      name: api_server
      path: /certifications_experience
    system_prompt: |
      You are responsible for fetching employees who have the required certifications and meet the minimum years of experience. Optionally, filter by department.

  #### Employee Mentorship Impact Analysis**
  - name: mentorship_impact
    description: |
      Calculates the effectiveness of mentors based on mentee performance improvement and project participation. Uses a tuple to pass a range for performance improvement and a list for departments. A dictionary maps productivity metrics to weights (e.g., {'tasks_completed': 0.5, 'meeting_attendance': 0.2, 'peer_feedback': 0.3}).
    parameters:
      - name: mentor_id
        description: Mentor's employee ID.
        required: true
        type: int
      - name: performance_range
        description: Tuple of min and max performance improvement percentages (e.g., (5, 20)).
        required: true
        type: Tuple[int, int]
      - name: departments
        description: List of departments to filter.
        required: false
        type: list
      - name: min_projects
        description: Minimum number of projects the mentee should have participated in.
        required: false
        type: integer
        default: 2
      - name: productivity_metrics
        description: Dictionary mapping productivity metrics to weights(e.g., tasks completed,  meeting attendance, peer feedback).
        required: true
        type: dict
    endpoint:
      name: api_server
      path: /mentorship_impact
    system_prompt: |
      Calculate mentorship impact based on performance improvement, department filtering, and project participation. Include weighted productivity metrics in the analysis.

  #### Employee Project Success Predictors**
  - name: project_success_predictors
    description: |
      Predicts the likelihood of success for an employee's project based on project characteristics like scope, timeline, and resources allocated. Uses past project performance as an optional filter.
    parameters:
      - name: project_name
        description: Name of the project.
        required: true
        type: string
      - name: scope
        description: The scope of the project (e.g., "large", "medium", "small").
        required: true
        type: string
        enum: ["small", "medium", "large"]
      - name: timeline
        description: Number of days allocated for the project.
        required: true
        type: integer
      - name: resources_allocated
        description: The resources (e.g., budget or headcount) allocated for the project.
        required: true
        type: float
      - name: past_performance
        description: Employee's past project success rate (0 to 1).
        required: false
        type: float
        default: 0.75
      - name: productivity_metrics
        description: Dictionary mapping productivity metrics to weights (leadership, communication, problem solving).
        required: true
        type: dict
    endpoint:
      name: api_server
      path: /project_success_predictors
    system_prompt: |
      Predict the likelihood of success for an employee's project based on its scope, timeline, resources, and weighted productivity metrics.

  #### Remote Work Efficiency Tracker**
  - name: remote_work_efficiency
    description: |
      Tracks the efficiency of employees working remotely, with a focus on project deadlines met and hours worked. Accepts a list of departments to compare remote efficiency across departments.
    parameters:
      - name: departments
        description: List of departments to include in the efficiency tracking.
        required: true
        type: list
      - name: track_hours
        description: Whether to track the hours worked by employees as part of the efficiency metric.
        required: false
        type: bool
        default: true
      - name: min_projects_completed
        description: Minimum number of projects completed during the remote work period.
        required: false
        type: integer
        default: 3
      - name: productivity_metrics
        description: Dictionary mapping metrics to weights (tasks completed, meeting attendence, peer feedback).
        required: true
        type: dict
    endpoint:
      name: api_server
      path: /remote_work_efficiency
    system_prompt: |
      Track the remote work efficiency of employees across departments, considering project deadlines, hours worked, and project completion. Include weighted productivity metrics.

ratelimits:
  - model: gpt-4
    selector:
      key: selector-key
      value: selector-value
    limit:
      tokens: 1
      unit: minute
