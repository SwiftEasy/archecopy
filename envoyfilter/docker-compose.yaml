services:
  envoy:
    image: envoyproxy/envoy:v1.30-latest
    hostname: envoy
    ports:
      - "10000:10000"
      - "19901:9901"
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
      - ./target/wasm32-wasi/release:/etc/envoy/proxy-wasm-plugins
      - /etc/ssl/cert.pem:/etc/ssl/cert.pem
    networks:
      - envoymesh
    depends_on:
      embeddingserver:
        condition: service_healthy

  embeddingserver:
    build:
      context: ../embedding-server
      dockerfile: Dockerfile
    ports:
      - "18080:80"
    healthcheck:
        test: ["CMD", "curl" ,"http://localhost:80/healthz"]
        interval: 5s
        retries: 20
    networks:
      - envoymesh

  qdrant:
    image: qdrant/qdrant
    hostname: vector-db
    ports:
      - 16333:6333
      - 16334:6334
    volumes:
      - ./qdrant_data:/qdrant/storage
    networks:
      - envoymesh

  chatbot-ui:
    build:
      context: ../chatbot-ui
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - envoymesh

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - ./prom_data:/prometheus
    networks:
      - envoymesh

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
      - ./grafana-data:/var/lib/grafana
    networks:
      - envoymesh

networks:
  envoymesh: {}
